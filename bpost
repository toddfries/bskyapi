#!/usr/bin/perl

# Copyright (c) 2024 Todd T. Fries <todd@fries.net>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;
use LWP::UserAgent;
use JSON qw(encode_json decode_json);
use POSIX qw(strftime);
use Getopt::Std;
use Storable qw(freeze thaw);
use Data::Dumper;
use Date::Manip;

$Data::Dumper::Sortkeys = 1;

# handle wide chars w/out warning
binmode(STDOUT, ":encoding(UTF-8)");
binmode(STDERR, ":encoding(UTF-8)");

# read/setup tokens

our $access_info;

our $opt_a; # action
our $opt_v; # verbose
our $opt_W; # reply post url
our $opt_c; # auth.json filename

# defaults
$opt_c = $ENV{'HOME'}."/.config/bsky/auth.json";

getopts('a:c:vW:');

our $v = 0;
if (defined $opt_v) {
	$v = $opt_v;
}
our $client = { };
$client->{1} = LWP::UserAgent->new(
	timeout => 60,
	max_redirect => 7,
);
$client->{1}->default_header('Atproto-Proxy' => 'did:web:api.bsky.chat#bsky_chat');
$client->{1}->default_header('Content-Type' => 'application/json');

token_check();

our $cache = { };

# {$call}->{ retrieved => time(); data => $data }

if (defined $opt_a) {
	if ($opt_a eq "post") {
		bpost($ARGV[0]);
		exit(0);
	}
	if ($opt_a eq "lsdm") {
		lsdm();
		exit(0);
	}
	if ($opt_a eq "rhandle") {
		my $did = resolve_handle($ARGV[0]);
		print $did."\n";
		exit(0);
	}
	if ($opt_a eq "get") {
		my $c = get1($ARGV[0]);
		if ($c->is_success) {
			my $dc = $c->decoded_content;
			my $data = decode_json($dc);
			print "data = ".Dumper($data);
		} else {
			print "c = ".Dumper($c);
		}
		exit(0);
	}
	if ($opt_a eq "notifications") {
		ck_notifications();
	}
	if ($opt_a eq "feed") {
		ck_feed(@ARGV);
	}
	if ($opt_a eq "myfeed") {
		ck_myfeed(@ARGV);
	}
	if ($opt_a eq "getSession") {
		getSession();
		exit(0);
	}
	printf "Unhandled: -a '%s'\n", $opt_a;
	exit(1);
}

exit(0);

sub ck_myfeed {
	my @args = @_;
	my $call = "app.bsky.feed.getActorFeed";
	my $did = getSession()->{did};
	my $c = get1( $call."?actor=$did");
	if (!$c->is_success) {
		print "notifcation.list: ".Dumper($c);
		exit(0);
	}
	my $dc = $c->decoded_content;
	my $data = decode_json($dc);
	# see json/app.bsky.feed.getFeed.log
	#print "data = ".Dumper($data);

	my @feed = @{ $data->{feed} };
	my $cursor = $data->{cursor};

	printf "Feed: (%d)\n", $#feed + 1;
	for my $felement ( @feed ) {
		my $likes = $felement->{post}->{likeCount};
		my $replies = $felement->{post}->{replyCount};
		my $reposts = $felement->{post}->{repostCount};
		my $quotes = $felement->{post}->{quoteCount};
		my $name = fmt_record(' ', $felement->{post}->{record});
		printf "> %d(L) %d(R) %d(RP) %d(Q) %s", $likes, $replies, $reposts, $quotes, $name;
	}
}
sub ck_notifications {
	my $call = "app.bsky.notification.listNotifications";
	my $c = get1( $call);
	if (!$c->is_success) {
		print "notifcation.list: ".Dumper($c);
		exit(0);
	}
	my $dc = $c->decoded_content;
	my $data = decode_json($dc);
	# see json/app.bsky.notification.listNotifications.log
	#print "data = ".Dumper($data);

	# $data->{seenAt} = '2025-01-02T09:39:39.018Z';
	# $data->{priority} = crazynes
	# @{ $data->{notifications} }
	my @notes = @{ $data->{notifications} };
	printf "Notifications[%d]:\n", $#notes + 1;
	printf "Seen? %6s %24s %s\n",
		"Reason",
		"Time", "displayName(handle)";
	for my $note (@notes) {
		my $isread = $note->{isRead};
		my $author = $note->{author};
		my $reason = $note->{reason};
		# 'like'|'repost'|'follow'|'mention'|'reply'|'quote'|
		# 'starterpack-joined'
		my $noteuri= $note->{uri};
		my $record = $note->{record}; # createdAt, subject, $type
		my $cid	= $note->{cid};
		my $idxtime= $note->{indexedAt};
		my $cretime= $note->{record}->{createdAt};
		my $who=fmt_author($author);
		printf " > %s %7s %24s %s\n",
			$isread ? "r" : "N",
			$reason,
			$cretime,
			$who;
		print fmt_record('	 ', $note->{record})."\n";
	}
	exit(0);
}

sub fmt_author {
	my ($author) = @_;

	my $ret = "";
	if (defined $author->{displayName} && length($author->{displayName})>0) {
		if ($v>0) {
			printf "displayName: '%s' len=%d\n", $author->{displayName}, length($author->{displayName});
			printf "handle: '%s'\n", $author->{handle};
		}
		$ret = $author->{displayName};
		$ret .= "(\@".$author->{handle}.")";
	} else {
		$ret = "\@".$author->{handle};
	}
	return $ret;
	return $ret;
}

sub fmt_record {
	my ($space, $record) = @_;
	my $ret = "";

	my $id = '<undef>';
	my ($uri,$txt);
	my $type = $record->{'$type'};
	if ($type eq 'app.bsky.graph.follow') {
		$id = $record->{subject};
	} elsif ($type eq 'app.bsky.feed.like') {
		$id = $record->{subject}->{cid};
		$uri = $record->{subject}->{uri};
	} elsif ($type eq 'app.bsky.feed.post') {
		$id = $record->{reply}->{parent}->{cid};
		$uri = $record->{reply}->{parent}->{uri};
		$txt = $record->{text};
	} else {
		$id = "Unhandled type: $type";
	}

	$ret .= sprintf "%s%s %s\n",
		$space,
		$type,
		$id;

	if (defined $uri) {
		$ret .= sprintf "%s%s\n",
			$space,
			$uri;
	}
	if (defined $txt) {
		$txt =~ s/^/${space}/g;
		$ret .= sprintf "%s\n",
			$txt;
	}
	return $ret;
}

sub lsdm {
	my $call = 'chat.bsky.convo.listConvos';

	_redo_lsdm:
	my $response = get1( $call );
	if (!$response->is_success) {
		my $dc = $response->decoded_content;
		my $data = decode_json($dc);
	}

	#print Dumper($response);
	if (! $response->is_success) {
		print Dumper($response->headers_as_string);
		print Dumper($response->decoded_content);
		die "Failed to post to bsky.app: ".$response->status_line;
	}

	my $dc = $response->decoded_content;
	my $data = decode_json($dc);

	# sse json/chat.bsky.convo.listConvos*
	#print "Convos data: ".Dumper($data);

	my $lastdate = Date::Manip::Date->new();
	for my $convo (@{ $data->{convos} }) {	
		my $lastmsg = $convo->{lastMessage}->{sentAt};
		my $mid = $convo->{id};
		my $mem = $convo->{members};
		$lastdate->parse($lastmsg);
		printf "%s %s ",
			$lastdate->printf("%Y%m%d %H:%M:%S"),
			$mid;
		for my $user (@{ $mem }) {
			printf "%s ", $user->{handle};
		}
		print "\n";
	}

	return $response;
}

sub bpost {
	my ($text) = @_;
	my $call = 'com.atproto.repo.createRecord';
	my $maxsize=300;
	my $repo = resolve_handle($access_info->{handle});

	if (length($text) > $maxsize) {
		my $msgleft = $text;
		my $count=1;
		my $post;
		while (1) {
			if (!defined $msgleft) {
				last;
			}
			printf "msgleft='%s'\n", $msgleft;
			my $thismemo = "";
			if ($count > 1) {
				$thismemo = sprintf "%d/ ", $count;
			}
			$count++;
			my $newmsg = $thismemo.$msgleft;
			if (length($newmsg) <= $maxsize) {
				return bpost($newmsg);
			}
			my $poststr;
			($poststr, $msgleft) = xsplitmsg($newmsg, $maxsize);
			printf "poststr='%s'\n", $poststr;
			printf "msgleft='%s'\n", $msgleft;
			$post = bpost($poststr);
			#print "bpost return = ".Dumper($post);
			if (defined $post->{uri}) {
				if ($post->{uri} =~ /^at:.*post\/(.*)$/) {
					$opt_W = sprintf("https://bsky.app/profile/%s/post/%s",
						$access_info->{handle}, $1);
				}
			}
		}
		return $post;
	}
	my $data = {
		repo => $access_info->{handle},
		collection => "app.bsky.feed.post",
		record => {
			"text" => $text,
			"createdAt" => strftime("%Y-%m-%dT%H:%M:%SZ", gmtime),
		},
	};

	if (defined $opt_W) {
		my $fluff = getrec($opt_W);
		$data->{record}->{reply}->{root}->{uri} = $fluff->{root}->{uri};
		$data->{record}->{reply}->{root}->{cid} = $fluff->{root}->{cid};
		$data->{record}->{reply}->{parent}->{uri} = $fluff->{parent}->{uri};
		$data->{record}->{reply}->{parent}->{cid} = $fluff->{parent}->{cid};
	}

	my $response = post1( $call, $data );

	#print Dumper($response);
	if (!$response->is_success) {
		die "Failed to post to bsky.app: ".$response->status_line;
	}
	my $dc = $response->decoded_content;
	my $post = decode_json($dc);
	printf "https://bsky.app/profile/%s/post/%s\n", $access_info->{handle}, $post->{commit}->{rev};
	print "Posted to bsky.app successfully.\n";
	return $post;
}

sub resolve_handle {
	my ($handle) = @_;
	my $call = "com.atproto.identity.resolveHandle?handle=$handle";
	my $data = cache_read($call);
	if (defined $data) {
		return $data;
	}

	my $c = get1( $call );
	my $dc = $c->decoded_content;
	$data = decode_json($dc);

	cache_write($call, $data);
	return $data->{did};
}

sub get1 {
	my ($call) = @_;
	token_check();
	return _call(1, "get", $call);
}
sub post1 {
	my ($call, $data) = @_;
	token_check();
	return _call(1, "post", $call, $data);
}

sub _call {
	my ($ver, $type, $query, $pdata) = @_;
	my $name = $query;
	$name =~ s/\?.*$//;
	$name =~ s/\/[0-9]{1,}/\/:id/;
	my ($data, $c);

	my $legit = 0;
	for my $t (("get","post","delete","head")) {
		if ($t eq $type) {
			$legit++;
			last;
		}
	}
	if ($legit < 1) {
		die("_call($ver, '${type}', $query): unhandled type");
	}
	my $uribase = 'https://bsky.social/xrpc/';
	if ($query =~ /^chat/) {
		$uribase = 'https://api.bsky.chat/xrpc/';
	} elsif ($query =~ /^app.bsky.feed/) {
		$uribase = 'https://public.api.bsky.app/xrpc/';
	}

	my $savedata = thaw(freeze({ data => $pdata }));
	_redo_action:
	if ($v>0 || 1) {
		printf "v$ver $type query=${query} @ %s\n", strftime( "%Y%m%d %H:%M:%S", localtime());
		if ($type eq "post" && $v>0) {
			print "   payload: ".Dumper($pdata);
		}
	}
	$query = $uribase.$query;
	my $req = HTTP::Request->new(uc($type) => $query);
	my $payload;
	if (defined $pdata) {
		$payload = encode_json($pdata);
		#$payload = $pdata;
		$req = HTTP::Request->new(uc($type) => $query);
		$req->header('Content-Type' => 'application/json');
		$req->content($payload);
	}
	eval {
		$c = $client->{$ver}->request($req);
	};
	$pdata = $savedata->{data};
	if ($v>0 && $type eq "post") {
		print "   pdata after request: ".Dumper($pdata);
	}
	my $hdrs = parse_headers($c);
	show_limits($name, $hdrs->{lims});
	my $problem = 0;
	if ($@) {
		warn sprintf("get failed: %s", $@);
		$problem = 1;
	}
	if (!defined $c) {
		die("\$c is undef");
	}
	if ($v>0) {
		print "c: ".Dumper($c)."\n";
	}
	if (! $c->is_success) {
		$problem = 1;
	}
	if ($problem > 0) {
		my $dc = $c->decoded_content;
		my $data = decode_json($dc);
		if (!defined $data) {
			print "data = undef, hmm. c:\n";
			print Dumper($c);
			die("_call status filure");
		}
		# '{"error":"ExpiredToken","message":"Token has been revoked"}
		if ($data->{error} eq "ExpiredToken") {
			if ($data->{message} eq "Token has been revoked") {
				$access_info->{accessJwt} = undef;
				token_check();
			} else {
				token_refresh();
			}
		}
		my $err = "";
		if (defined $data->{status}) {
			$err .= $data->{status};
		} else {
			$err .= "???";
		}
		if (defined $data->{title}) {
			$err .= ": ".$data->{title};
		}
		if (defined $data->{detail} && $data->{title} ne $data->{detail}) {
			$err .= ": ".$data->{detail};
		}
		if (defined $data->{errors}) {
			$err .= ": errros = ".Dumper($data->{errors});
		}
		if (defined $data->{type} && $data->{type} ne "about:blank") {
			$err .= "\n	".$data->{type};
		}
		$err .= "\n";
		my $estat = "";
		if ($v>0) {
			foreach my $s (sort keys %{$hdrs->{stats}}) {
				$estat .= sprintf "\t%s = %s\n", $s, $hdrs->{stats}->{$s};
			}
			$estat .= "\n";
		}
		print STDERR $err.$estat;
		die("Today is a good day to die: ".$c->status_line);
	}
	return $c;
}

sub parse_headers {
	my ($resp) = @_;

	my $lims = { };
	my $stats = { };
	if ($v>0) {
		print STDERR "Headers:\n";
	}
	for my $h ($resp->header_field_names) {
		my $val = $resp->header($h);
		if (! defined $val) {
			next;
		}
		if ($h =~ /^ratelimit-(limit|remaining|reset|policy)/i) {
			my $lim = "std";
			my $ltype = lc($1);
			if ($v>0) {
				printf STDERR "\t.. %s .. %s\n", $lim, $ltype;
			}
			$lims->{$lim}->{$ltype} = $val;
			next;
		}
		if ($h =~ /^(x-(con|res|tran|acc)|cont|date|server|api)/i) {
			$stats->{$h} = $val;
			next;
		}
		if ($v>0) {
			printf STDERR "\t!header handled: %s = '%s'\n", $h, $resp->header($h);
		}
	}
	if ($v>0) {
		print STDERR "\n";
	}
	my $tmp = {
		lims => $lims,
		stats => $stats,
	};
	return $tmp;
}
sub check_limits {
	my ($name, $lims) = @_;
	my $timestamp = Date::Manip::Date->new();
	my $wait = 0;
	for my $lim (keys %{ $lims }) {
		if ($lims->{$lim}->{remaining} < 1) {
			$timestamp->parse("epoch ".$lims->{$lim}->{reset});
			printf STDERR "Matched limit %s.%s { %d/%d, %s }...\n",
				$name, $lim,
				$lims->{$lim}->{remaining},
				$lims->{$lim}->{limit},
				$timestamp->printf("%Y%m%d %H:%M:%S");
			my $thiswait = $lims->{$lim}->{reset};
			if ($thiswait < 1) {
				warn("lim ${name}.$lim reset is $thiswait");
				continue;
			}
			if ($wait < 1 || ( $wait > 0 && $wait > $thiswait ) ) {
				$wait = $thiswait;
			}
		} else {
			$timestamp->parse("epoch ".$lims->{$lim}->{reset});
			printf STDERR "!Matched limit %s.%s { %d/%d, %s }...\n",
				$name, $lim,
				$lims->{$lim}->{remaining},
				$lims->{$lim}->{limit},
				$timestamp->printf("%Y%m%d %H:%M:%S");
		}
	}
	if ($wait > 0) {
		wait_till($name, $wait);
		return 1;
	}
	return 0;
}
sub show_limits {
	my ($name, $lims) = @_;
	my $timestamp = Date::Manip::Date->new();

	for my $lim (keys %{ $lims }) {
		$timestamp->parse("epoch ".$lims->{$lim}->{reset});
		printf "  %s.%s = {%d/%d (%s), %s}\n", $name, $lim,
			$lims->{$lim}->{remaining},
			$lims->{$lim}->{limit},
			$lims->{$lim}->{policy},
			$timestamp->printf("%Y%m%d %H:%M:%S");
	}
}
# XXX enhance based on https://docs.bsky.app/docs/advanced-guides/posts#replies
sub getrec {
	my ($url) = @_;
	if ($url =~ /\/profile\/(.*)\/post\/(.*)$/) {
		my $repo = $1;
		my $postid = $2;
		my $c = get1("com.atproto.repo.getRecord?repo=${repo}&collection=app.bsky.feed.post&rkey=$postid");
		if ($v>0) {
		print "getrec: ";
		}
		if ($c->is_success) {
			my $dc = $c->decoded_content;
			my $data = decode_json($dc);
			if ($v>0) {
			print "data = ".Dumper($data);
			}
			my $parent = {
				cid => $data->{cid},
				uri => $data->{uri},
			};
			my $root = {
				cid => $data->{value}->{reply}->{root}->{cid},
				uri => $data->{value}->{reply}->{root}->{uri},
			};
			my $tmp = {
				root => $root,
				parent => $parent,
			};
			if (!defined $root->{cid}) {
				$tmp->{root} = $parent;
			}
			return $tmp;
		} else {
			print "c = ".Dumper($c);
			die "getrec oops";
		}
	}
	die "getrec bad url: $url";
}

#
# oauth2 - gotta learn it once!
#

# Function to read authentication information from file
sub read_auth_info {
	my $auth_file = $opt_c;
	if (-e $auth_file) {
		open my $fh, '<', $auth_file or die "Can't open $auth_file: $!";
		my $ainfo = { };
		local $/;
		my $json_text = <$fh>;
		close $fh;
		$ainfo = decode_json($json_text);
		return $ainfo;
	} else {
		return;
	}
}

# Function to save authentication token to file
sub save_auth_info {
	my $access_info = shift;
	#print "access_info = ".Dumper($access_info);
	my $auth_file = $opt_c;
	open my $fh, '>', $auth_file or die "Cannot open $auth_file: $!";
	print $fh encode_json($access_info);
	print $fh "\n";
	close $fh;
}

# Function to authenticate and get access token
sub authenticate {
	my ($handle, $password) = @_;
	my $req = {
			identifier => $handle,
			password => $password
	};
	my $call = 'com.atproto.server.createSession';
	my $response = _call(1, "post", $call, $req);

	if ($response->is_success) {
		my $auth_info = decode_json($response->decoded_content);
		return $auth_info;
	} else {
		print "Failed to authenticate: ".$response->status_line . "\n";
		die Dumper($response);
	}
}

sub token_refresh {
	my $call = 'com.atproto.server.refreshSession';
	$client->{1}->default_header(
		'Authorization' => "Bearer ".$access_info->{refreshJwt}
	);
	my $response = _call(1, "post", $call);

	if (!$response->is_success) {
		my $dc = $response->decoded_content;
		my $data = decode_json($dc);
		if ($data->{error} eq "ExpiredToken" || $data->{error} eq "InvalidToken") {
			# Handle expired or invalid refresh token, e.g., prompt for new credentials
			warn "Refresh token has expired or is invalid. Please re-authenticate.";
			$access_info = authenticate($access_info->{handle}, $access_info->{_pass});
		} else {
			die "Failed to refresh token: " . $response->status_line . "\n" . Dumper($response);
		}
	}

	my $new_auth_info = decode_json($response->decoded_content);
	$access_info->{accessJwt} = $new_auth_info->{accessJwt};
	$access_info->{last_refresh} = time;  # Update last refresh time
	save_auth_info($access_info);
	$client->{1}->default_header(
		'Authorization' => "Bearer ".$access_info->{accessJwt}
	);
	return $access_info;
}

sub token_check {
	if ($v>0) {
		print "token_check...\n";
	}
	if (!defined $access_info) {
		if ($v>0) {
			print "token_check: calling read_auth_info()\n";
		}
		$access_info = read_auth_info();
	}
	my $handle;
	if (!defined $access_info->{handle}) {
		if ($v>0) {
			print "token_check: !handle\n";
		}
		print "Enter your bsky.app handle: (like example.bsky.social) ";
		chomp($handle = <STDIN>);
		$access_info->{handle} = $handle;
	}
	if (!defined $access_info->{accessJwt}) {
		if ($v>0) {
			print "token_check: !accessJwt\n";
		}
		$handle = $access_info->{handle};
		my $password = $access_info->{_pass};
		if (!defined $password) {
			print "Enter your bsky.app password: ";
			chomp($password = <STDIN>);
			$access_info->{_pass} = $password;
		}
		$access_info = authenticate($handle, $password);
		#print Dumper($access_info);
		save_auth_info($access_info);
	}
	$client->{1}->default_header('Authorization' =>
		"Bearer ".$access_info->{accessJwt});

	# Implement logic here, e.g., time check or error handling for
	#  expired tokens
	# For a simple time check:
	my $current_time = time;
	my $last_refresh_time = $access_info->{last_refresh} // 0; # Assuming you save this somewhere
	if ($current_time - $last_refresh_time > 7200) {
		$access_info = token_refresh();
	}
}

sub getSession {
	my $call = "com.atproto.server.getSession";
	my $data = cache_read($call);
	if (defined $data) {
		# if ($cache->{$call}->{time} < (time() - 3600)) {
		return $data;
		# }
	}
	my $c = get1($call);
	if (! $c->is_success) {
		print "c = ".Dumper($c);
		die("getSession");
	}
	printf "getSession: %s = SUCCESS!\n", $call;
	my $dc = $c->decoded_content;
	$data = decode_json($dc);
	# see json/getSession.log
	#print "data = ".Dumper($data);

	cache_write($call, $data);
	return $data;
}

sub cache_read {
	my ($var) = @_;

	my $data = $cache->{$var}->{data};
	return $data;
}
sub cache_write {
	my ($var, $val) = @_;

	$cache->{$var}->{time} = time();
	$cache->{$var}->{data} = $val;
}

sub xsplitmsg {
	my ($msg, $maxsize) = @_;

	# try by line first
	my @lines = split(/\n/, $msg);
	my $line = $lines[0];
	my $poststr = $line."\n";
	# attempt to split on lines...
	if (length($line) < $maxsize) {
		my $msgleft = substr($msg, length($poststr)+1);
		my $i = 1;
		while (1) {
			$line = $lines[$i++];
			if (!defined $line) {
				return ($poststr, $msgleft);
			}
			if ( (length($poststr) + length($line) + 1) >
				$maxsize) {
				return ($poststr, $msgleft);
			}
			$poststr .= $line . "\n";
			$msgleft = substr($msgleft, length($line)+1);
		}
		die("We have reached the bermuda triangle!");
	}
	# XXX insert split on words
	# ... otherwise, split on chars.
	$poststr = substr($msg, 0, $maxsize);
	my $msgleft = substr($msg, length($poststr));
	return ($poststr, $msgleft);
}
